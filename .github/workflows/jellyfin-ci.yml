name: Jellyfin CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_test_analyze:
    runs-on: ubuntu-latest

    steps:
    # Checkout do código do repositório
    - name: Checkout code
      uses: actions/checkout@v2

    # Configurar .NET Core
    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    # Instalar SonarScanner
    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    # Iniciar a análise do SonarCloud
    - name: SonarCloud Scan - Begin
      run: |
        dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /o:"${{ secrets.SONAR_ORGANIZATION }}"

    # Restaurar dependências
    - name: Restore dependencies
      run: dotnet restore

    # Executar testes automatizados
    - name: Run tests
      run: dotnet test --no-restore --verbosity normal

    # Build do projeto para análise
    - name: Build project
      run: dotnet build

    # Finalizar a análise do SonarCloud
    - name: SonarCloud Scan - End
      run: dotnet-sonarscanner end

    # Login no Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build da imagem Docker
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/jellyfin-app:latest .

    # Push da imagem Docker para o Docker Hub
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/jellyfin-app:latest
